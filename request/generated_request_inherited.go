package request

// Code generated by go generate; DO NOT EDIT.

import (
	"crypto/tls"
	"io"
	"mime/multipart"
	"net"
	"time"

	"github.com/valyala/fasthttp"
)

// -----------------------------------------------------------------------------

func (req *RequestContext) Conn() (out1 net.Conn) {
	out1 = req.ctx.Conn()
	return
}

func (req *RequestContext) ConnID() (out1 uint64) {
	out1 = req.ctx.ConnID()
	return
}

func (req *RequestContext) ConnRequestNum() (out1 uint64) {
	out1 = req.ctx.ConnRequestNum()
	return
}

func (req *RequestContext) ConnTime() (out1 time.Time) {
	out1 = req.ctx.ConnTime()
	return
}

func (req *RequestContext) Deadline() (out1 time.Time, out2 bool) {
	out1, out2 = req.ctx.Deadline()
	return
}

func (req *RequestContext) Done() (out1 <-chan struct{}) {
	out1 = req.ctx.Done()
	return
}

func (req *RequestContext) Err() (out1 error) {
	out1 = req.ctx.Err()
	return
}

func (req *RequestContext) Error(in1 string, in2 int) {
	req.ctx.Error(in1, in2)
	return
}

func (req *RequestContext) FormFile(in1 string) (out1 *multipart.FileHeader, out2 error) {
	out1, out2 = req.ctx.FormFile(in1)
	return
}

func (req *RequestContext) FormValue(in1 string) (out1 []uint8) {
	out1 = req.ctx.FormValue(in1)
	return
}

func (req *RequestContext) Hijack(in1 fasthttp.HijackHandler) {
	req.ctx.Hijack(in1)
	return
}

func (req *RequestContext) HijackSetNoResponse(in1 bool) {
	req.ctx.HijackSetNoResponse(in1)
	return
}

func (req *RequestContext) Hijacked() (out1 bool) {
	out1 = req.ctx.Hijacked()
	return
}

func (req *RequestContext) Host() (out1 []uint8) {
	out1 = req.ctx.Host()
	return
}

func (req *RequestContext) ID() (out1 uint64) {
	out1 = req.ctx.ID()
	return
}

func (req *RequestContext) IfModifiedSince(in1 time.Time) (out1 bool) {
	out1 = req.ctx.IfModifiedSince(in1)
	return
}

func (req *RequestContext) Init(in1 *fasthttp.Request, in2 net.Addr, in3 fasthttp.Logger) {
	req.ctx.Init(in1, in2, in3)
	return
}

func (req *RequestContext) Init2(in1 net.Conn, in2 fasthttp.Logger, in3 bool) {
	req.ctx.Init2(in1, in2, in3)
	return
}

func (req *RequestContext) IsBodyStream() (out1 bool) {
	out1 = req.ctx.IsBodyStream()
	return
}

func (req *RequestContext) IsConnect() (out1 bool) {
	out1 = req.ctx.IsConnect()
	return
}

func (req *RequestContext) IsDelete() (out1 bool) {
	out1 = req.ctx.IsDelete()
	return
}

func (req *RequestContext) IsGet() (out1 bool) {
	out1 = req.ctx.IsGet()
	return
}

func (req *RequestContext) IsHead() (out1 bool) {
	out1 = req.ctx.IsHead()
	return
}

func (req *RequestContext) IsOptions() (out1 bool) {
	out1 = req.ctx.IsOptions()
	return
}

func (req *RequestContext) IsPatch() (out1 bool) {
	out1 = req.ctx.IsPatch()
	return
}

func (req *RequestContext) IsPost() (out1 bool) {
	out1 = req.ctx.IsPost()
	return
}

func (req *RequestContext) IsPut() (out1 bool) {
	out1 = req.ctx.IsPut()
	return
}

func (req *RequestContext) IsTLS() (out1 bool) {
	out1 = req.ctx.IsTLS()
	return
}

func (req *RequestContext) IsTrace() (out1 bool) {
	out1 = req.ctx.IsTrace()
	return
}

func (req *RequestContext) LastTimeoutErrorResponse() (out1 *fasthttp.Response) {
	out1 = req.ctx.LastTimeoutErrorResponse()
	return
}

func (req *RequestContext) LocalAddr() (out1 net.Addr) {
	out1 = req.ctx.LocalAddr()
	return
}

func (req *RequestContext) LocalIP() (out1 net.IP) {
	out1 = req.ctx.LocalIP()
	return
}

func (req *RequestContext) Logger() (out1 fasthttp.Logger) {
	out1 = req.ctx.Logger()
	return
}

func (req *RequestContext) Method() (out1 []uint8) {
	out1 = req.ctx.Method()
	return
}

func (req *RequestContext) MultipartForm() (out1 *multipart.Form, out2 error) {
	out1, out2 = req.ctx.MultipartForm()
	return
}

func (req *RequestContext) Path() (out1 []uint8) {
	out1 = req.ctx.Path()
	return
}

func (req *RequestContext) PostArgs() (out1 *fasthttp.Args) {
	out1 = req.ctx.PostArgs()
	return
}

func (req *RequestContext) PostBody() (out1 []uint8) {
	out1 = req.ctx.PostBody()
	return
}

func (req *RequestContext) QueryArgs() (out1 *fasthttp.Args) {
	out1 = req.ctx.QueryArgs()
	return
}

func (req *RequestContext) Redirect(in1 string, in2 int) {
	req.ctx.Redirect(in1, in2)
	return
}

func (req *RequestContext) RedirectBytes(in1 []uint8, in2 int) {
	req.ctx.RedirectBytes(in1, in2)
	return
}

func (req *RequestContext) Referer() (out1 []uint8) {
	out1 = req.ctx.Referer()
	return
}

func (req *RequestContext) RemoteAddr() (out1 net.Addr) {
	out1 = req.ctx.RemoteAddr()
	return
}

func (req *RequestContext) RemoteIP() (out1 net.IP) {
	out1 = req.ctx.RemoteIP()
	return
}

func (req *RequestContext) RemoveUserValue(in1 string) {
	req.ctx.RemoveUserValue(in1)
	return
}

func (req *RequestContext) RemoveUserValueBytes(in1 []uint8) {
	req.ctx.RemoveUserValueBytes(in1)
	return
}

func (req *RequestContext) RequestBodyStream() (out1 io.Reader) {
	out1 = req.ctx.RequestBodyStream()
	return
}

func (req *RequestContext) RequestURI() (out1 []uint8) {
	out1 = req.ctx.RequestURI()
	return
}

func (req *RequestContext) ResetBody() {
	req.ctx.ResetBody()
	return
}

func (req *RequestContext) ResetUserValues() {
	req.ctx.ResetUserValues()
	return
}

func (req *RequestContext) SendFile(in1 string) {
	req.ctx.SendFile(in1)
	return
}

func (req *RequestContext) SendFileBytes(in1 []uint8) {
	req.ctx.SendFileBytes(in1)
	return
}

func (req *RequestContext) SetBody(in1 []uint8) {
	req.ctx.SetBody(in1)
	return
}

func (req *RequestContext) SetBodyStream(in1 io.Reader, in2 int) {
	req.ctx.SetBodyStream(in1, in2)
	return
}

func (req *RequestContext) SetBodyStreamWriter(in1 fasthttp.StreamWriter) {
	req.ctx.SetBodyStreamWriter(in1)
	return
}

func (req *RequestContext) SetBodyString(in1 string) {
	req.ctx.SetBodyString(in1)
	return
}

func (req *RequestContext) SetConnectionClose() {
	req.ctx.SetConnectionClose()
	return
}

func (req *RequestContext) SetContentType(in1 string) {
	req.ctx.SetContentType(in1)
	return
}

func (req *RequestContext) SetContentTypeBytes(in1 []uint8) {
	req.ctx.SetContentTypeBytes(in1)
	return
}

func (req *RequestContext) SetRemoteAddr(in1 net.Addr) {
	req.ctx.SetRemoteAddr(in1)
	return
}

func (req *RequestContext) SetStatusCode(in1 int) {
	req.ctx.SetStatusCode(in1)
	return
}

func (req *RequestContext) SetUserValue(in1 string, in2 interface{}) {
	req.ctx.SetUserValue(in1, in2)
	return
}

func (req *RequestContext) SetUserValueBytes(in1 []uint8, in2 interface{}) {
	req.ctx.SetUserValueBytes(in1, in2)
	return
}

func (req *RequestContext) String() (out1 string) {
	out1 = req.ctx.String()
	return
}

func (req *RequestContext) Success(in1 string, in2 []uint8) {
	req.ctx.Success(in1, in2)
	return
}

func (req *RequestContext) SuccessString(in1 string, in2 string) {
	req.ctx.SuccessString(in1, in2)
	return
}

func (req *RequestContext) TLSConnectionState() (out1 *tls.ConnectionState) {
	out1 = req.ctx.TLSConnectionState()
	return
}

func (req *RequestContext) Time() (out1 time.Time) {
	out1 = req.ctx.Time()
	return
}

func (req *RequestContext) TimeoutError(in1 string) {
	req.ctx.TimeoutError(in1)
	return
}

func (req *RequestContext) TimeoutErrorWithCode(in1 string, in2 int) {
	req.ctx.TimeoutErrorWithCode(in1, in2)
	return
}

func (req *RequestContext) TimeoutErrorWithResponse(in1 *fasthttp.Response) {
	req.ctx.TimeoutErrorWithResponse(in1)
	return
}

func (req *RequestContext) URI() (out1 *fasthttp.URI) {
	out1 = req.ctx.URI()
	return
}

func (req *RequestContext) UserAgent() (out1 []uint8) {
	out1 = req.ctx.UserAgent()
	return
}

func (req *RequestContext) UserValue(in1 string) (out1 interface{}) {
	out1 = req.ctx.UserValue(in1)
	return
}

func (req *RequestContext) UserValueBytes(in1 []uint8) (out1 interface{}) {
	out1 = req.ctx.UserValueBytes(in1)
	return
}

func (req *RequestContext) Value(in1 interface{}) (out1 interface{}) {
	out1 = req.ctx.Value(in1)
	return
}

func (req *RequestContext) VisitUserValues(in1 func([]uint8, interface{})) {
	req.ctx.VisitUserValues(in1)
	return
}

func (req *RequestContext) Write(in1 []uint8) (out1 int, out2 error) {
	out1, out2 = req.ctx.Write(in1)
	return
}

func (req *RequestContext) WriteString(in1 string) (out1 int, out2 error) {
	out1, out2 = req.ctx.WriteString(in1)
	return
}
